// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: records.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const createRecord = `-- name: CreateRecord :exec
INSERT INTO records (id, project, value, timestamp)
VALUES (?, ?, ?, ?)
`

type CreateRecordParams struct {
	ID        string `db:"id" json:"id"`
	Project   string `db:"project" json:"project"`
	Value     int64  `db:"value" json:"value"`
	Timestamp string `db:"timestamp" json:"timestamp"`
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) error {
	_, err := q.db.ExecContext(ctx, createRecord,
		arg.ID,
		arg.Project,
		arg.Value,
		arg.Timestamp,
	)
	return err
}

const createRecordTag = `-- name: CreateRecordTag :exec
INSERT INTO tags (record_id, tag)
VALUES (?, ?)
`

type CreateRecordTagParams struct {
	RecordID string `db:"record_id" json:"record_id"`
	Tag      string `db:"tag" json:"tag"`
}

func (q *Queries) CreateRecordTag(ctx context.Context, arg CreateRecordTagParams) error {
	_, err := q.db.ExecContext(ctx, createRecordTag, arg.RecordID, arg.Tag)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM records WHERE project = ?
`

func (q *Queries) DeleteProject(ctx context.Context, project string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, project)
	return err
}

const deleteRecord = `-- name: DeleteRecord :execresult
DELETE FROM records WHERE id = ?
`

func (q *Queries) DeleteRecord(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecord, id)
}

const deleteRecordTags = `-- name: DeleteRecordTags :exec
DELETE FROM tags WHERE record_id = ?
`

func (q *Queries) DeleteRecordTags(ctx context.Context, recordID string) error {
	_, err := q.db.ExecContext(ctx, deleteRecordTags, recordID)
	return err
}

const deleteRecordsUntil = `-- name: DeleteRecordsUntil :execresult
DELETE FROM records WHERE timestamp < ?
`

func (q *Queries) DeleteRecordsUntil(ctx context.Context, timestamp string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecordsUntil, timestamp)
}

const deleteRecordsUntilByProject = `-- name: DeleteRecordsUntilByProject :execresult
DELETE FROM records WHERE project = ? AND timestamp < ?
`

type DeleteRecordsUntilByProjectParams struct {
	Project   string `db:"project" json:"project"`
	Timestamp string `db:"timestamp" json:"timestamp"`
}

func (q *Queries) DeleteRecordsUntilByProject(ctx context.Context, arg DeleteRecordsUntilByProjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecordsUntilByProject, arg.Project, arg.Timestamp)
}

const getProjectInfo = `-- name: GetProjectInfo :one
SELECT 
    COUNT(*) as record_count,
    COALESCE(SUM(value), 0) as total_value,
    MIN(timestamp) as first_record_at,
    MAX(timestamp) as last_record_at
FROM records
WHERE project = ?
`

type GetProjectInfoRow struct {
	RecordCount   int64       `db:"record_count" json:"record_count"`
	TotalValue    interface{} `db:"total_value" json:"total_value"`
	FirstRecordAt interface{} `db:"first_record_at" json:"first_record_at"`
	LastRecordAt  interface{} `db:"last_record_at" json:"last_record_at"`
}

func (q *Queries) GetProjectInfo(ctx context.Context, project string) (GetProjectInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectInfo, project)
	var i GetProjectInfoRow
	err := row.Scan(
		&i.RecordCount,
		&i.TotalValue,
		&i.FirstRecordAt,
		&i.LastRecordAt,
	)
	return i, err
}

const getRecord = `-- name: GetRecord :one
SELECT id, project, value, timestamp
FROM records
WHERE id = ?
`

func (q *Queries) GetRecord(ctx context.Context, id string) (Record, error) {
	row := q.db.QueryRowContext(ctx, getRecord, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Project,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}

const getRecordTags = `-- name: GetRecordTags :many
SELECT tag
FROM tags
WHERE record_id = ?
`

func (q *Queries) GetRecordTags(ctx context.Context, recordID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRecordTags, recordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecords = `-- name: ListRecords :many
SELECT id, project, value, timestamp
FROM records
WHERE timestamp BETWEEN ? AND ? AND project = ?
ORDER BY timestamp
`

type ListRecordsParams struct {
	Timestamp   string `db:"timestamp" json:"timestamp"`
	Timestamp_2 string `db:"timestamp_2" json:"timestamp_2"`
	Project     string `db:"project" json:"project"`
}

// Note: BETWEEN clause must come first due to sqlc bug with SQLite parameter handling
func (q *Queries) ListRecords(ctx context.Context, arg ListRecordsParams) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, listRecords, arg.Timestamp, arg.Timestamp_2, arg.Project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecordsWithTags = `-- name: ListRecordsWithTags :many
SELECT DISTINCT r.id, r.project, r.value, r.timestamp
FROM records r
JOIN tags t ON r.id = t.record_id
WHERE r.timestamp BETWEEN ? AND ? AND r.project = ? AND t.tag IN (/*SLICE:tags*/?)
ORDER BY r.timestamp
`

type ListRecordsWithTagsParams struct {
	Timestamp   string   `db:"timestamp" json:"timestamp"`
	Timestamp_2 string   `db:"timestamp_2" json:"timestamp_2"`
	Project     string   `db:"project" json:"project"`
	Tags        []string `db:"tags" json:"tags"`
}

// Note: BETWEEN clause must come first due to sqlc bug with SQLite parameter handling
// Returns records that have any of the specified tags
func (q *Queries) ListRecordsWithTags(ctx context.Context, arg ListRecordsWithTagsParams) ([]Record, error) {
	query := listRecordsWithTags
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Timestamp)
	queryParams = append(queryParams, arg.Timestamp_2)
	queryParams = append(queryParams, arg.Project)
	if len(arg.Tags) > 0 {
		for _, v := range arg.Tags {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tags*/?", strings.Repeat(",?", len(arg.Tags))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tags*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecord = `-- name: UpdateRecord :execresult
UPDATE records SET project = ?, value = ?, timestamp = ?
WHERE id = ?
`

type UpdateRecordParams struct {
	Project   string `db:"project" json:"project"`
	Value     int64  `db:"value" json:"value"`
	Timestamp string `db:"timestamp" json:"timestamp"`
	ID        string `db:"id" json:"id"`
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRecord,
		arg.Project,
		arg.Value,
		arg.Timestamp,
		arg.ID,
	)
}
