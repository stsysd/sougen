// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: records.sql

package db

import (
	"context"
	"database/sql"
)

const createRecord = `-- name: CreateRecord :exec
INSERT INTO records (id, project, value, done_at)
VALUES (?, ?, ?, ?)
`

type CreateRecordParams struct {
	ID      string `db:"id" json:"id"`
	Project string `db:"project" json:"project"`
	Value   int64  `db:"value" json:"value"`
	DoneAt  string `db:"done_at" json:"done_at"`
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) error {
	_, err := q.db.ExecContext(ctx, createRecord,
		arg.ID,
		arg.Project,
		arg.Value,
		arg.DoneAt,
	)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM records WHERE project = ?
`

func (q *Queries) DeleteProject(ctx context.Context, project string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, project)
	return err
}

const deleteRecord = `-- name: DeleteRecord :execresult
DELETE FROM records WHERE id = ?
`

func (q *Queries) DeleteRecord(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecord, id)
}

const deleteRecordsUntil = `-- name: DeleteRecordsUntil :execresult
DELETE FROM records WHERE done_at < ?
`

func (q *Queries) DeleteRecordsUntil(ctx context.Context, doneAt string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecordsUntil, doneAt)
}

const deleteRecordsUntilByProject = `-- name: DeleteRecordsUntilByProject :execresult
DELETE FROM records WHERE project = ? AND done_at < ?
`

type DeleteRecordsUntilByProjectParams struct {
	Project string `db:"project" json:"project"`
	DoneAt  string `db:"done_at" json:"done_at"`
}

func (q *Queries) DeleteRecordsUntilByProject(ctx context.Context, arg DeleteRecordsUntilByProjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRecordsUntilByProject, arg.Project, arg.DoneAt)
}

const getProjectInfo = `-- name: GetProjectInfo :one
SELECT 
    COUNT(*) as record_count,
    COALESCE(SUM(value), 0) as total_value,
    MIN(done_at) as first_record_at,
    MAX(done_at) as last_record_at
FROM records
WHERE project = ?
`

type GetProjectInfoRow struct {
	RecordCount   int64       `db:"record_count" json:"record_count"`
	TotalValue    interface{} `db:"total_value" json:"total_value"`
	FirstRecordAt interface{} `db:"first_record_at" json:"first_record_at"`
	LastRecordAt  interface{} `db:"last_record_at" json:"last_record_at"`
}

func (q *Queries) GetProjectInfo(ctx context.Context, project string) (GetProjectInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectInfo, project)
	var i GetProjectInfoRow
	err := row.Scan(
		&i.RecordCount,
		&i.TotalValue,
		&i.FirstRecordAt,
		&i.LastRecordAt,
	)
	return i, err
}

const getRecord = `-- name: GetRecord :one
SELECT id, project, value, done_at
FROM records
WHERE id = ?
`

func (q *Queries) GetRecord(ctx context.Context, id string) (Record, error) {
	row := q.db.QueryRowContext(ctx, getRecord, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Project,
		&i.Value,
		&i.DoneAt,
	)
	return i, err
}

const listRecords = `-- name: ListRecords :many
SELECT id, project, value, done_at
FROM records
WHERE done_at BETWEEN ? AND ? AND project = ?
ORDER BY done_at
`

type ListRecordsParams struct {
	DoneAt   string `db:"done_at" json:"done_at"`
	DoneAt_2 string `db:"done_at_2" json:"done_at_2"`
	Project  string `db:"project" json:"project"`
}

func (q *Queries) ListRecords(ctx context.Context, arg ListRecordsParams) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, listRecords, arg.DoneAt, arg.DoneAt_2, arg.Project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Value,
			&i.DoneAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
